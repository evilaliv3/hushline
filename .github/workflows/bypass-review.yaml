name: Bypass Review by Admin for Specific Files

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  bypass-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history so we can access any branch

      - name: Fetch main branch
        run: git fetch origin main:main

      - name: Fetch PR branch
        run: |
          git fetch origin $GITHUB_HEAD_REF:$GITHUB_HEAD_REF
          git checkout $GITHUB_HEAD_REF

      - name: Set up GitHub CLI Authentication
        env:
          GH_TOKEN: ${{ secrets.ADMIN_PAT }}
        run: |
          # Get the author of the PR
          AUTHOR=$(gh pr view ${{ github.event.pull_request.number }} --json author --jq '.author.login')

          # Check the user's role using memberships API (works for both public and private members)
          ADMIN_CHECK=$(gh api orgs/scidsg/memberships/$AUTHOR --jq '.role')

          # If the user isn't an admin, exit with a detailed error message
          if [ "$ADMIN_CHECK" != "admin" ]; then
            echo "User is not an admin. Their role is: $ADMIN_CHECK. Exiting."
            exit 0
          fi

      - name: Check for specific files and approve if conditions are met
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_PAT }}
        run: |
          git diff --name-only origin/main $GITHUB_HEAD_REF > file_list.txt

          if grep -v -qE '(\.css$|\.md$|^hushline/version.py$)' file_list.txt; then
            echo "PR contains files other than .css, .md, or hushline/version.py. Exiting without approval."
            exit 0  # Exit without failure
          fi

          - name: Check for specific files
          id: file-check
          env:
            GITHUB_TOKEN: ${{ secrets.ADMIN_PAT }}
          run: |
            git diff --name-only origin/main $GITHUB_HEAD_REF > file_list.txt

            # Check if there are files other than allowed (.css, .md, hushline/version.py)
            if grep -v -qE '(\.css$|\.md$|^hushline/version.py$)' file_list.txt; then
              echo "PR contains files other than .css, .md, or hushline/version.py. Exiting without approval."
              echo "approve=false" >> $GITHUB_ENV
              exit 0  # Exit without failure
            fi

            echo "approve=true" >> $GITHUB_ENV

      - name: Ensure all required checks have passed
        if: env.approve == 'true'
        env:
          GH_TOKEN: ${{ secrets.ADMIN_PAT }}
        run: |
          # Fetch workflow run statuses for the PR
          PR_NUMBER=${{ github.event.pull_request.number }}
          RUNS=$(gh run list --json conclusion,status,event --limit 100 --jq \
            '.[] | select(.event == "pull_request")')

          # Check if any workflows are still in progress
          if echo "$RUNS" | grep -q '"status": "in_progress"'; then
            echo "Some workflows are still running. Exiting without approval."
            exit 0
          fi

          # Check if any workflows have failed
          if echo "$RUNS" | grep -q '"conclusion": "failure"'; then
            echo "Some workflows have failed. Exiting without approval."
            exit 0
          fi

          echo "All workflows have completed successfully."

      - name: Approve PR
        if: env.approve == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_PAT }}
        run: |
          echo "Only .css, .md files and/or hushline/version.py detected, user is an admin, and all required checks have passed. Approving PR."
          gh pr review ${{ github.event.pull_request.number }} --approve --body "Approved: All conditions met (specific files, admin, checks passed)."
